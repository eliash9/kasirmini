          async function closeScanner(){
            scanningActive = false;
            showScanner.value = false;
            try{ if (codeReader && codeReader.reset) codeReader.reset(); } catch {}
            codeReader = null;
            try {
              const video = document.getElementById('scan-video');
              if (video) { video.pause(); video.srcObject = null; }
              if (mediaStream) { mediaStream.getTracks().forEach(t => t.stop()); }
            } catch {}
            mediaStream = null;
          }

          const filteredHistory = computed(() => {
            const start = filterStart.value ? new Date(filterStart.value + 'T00:00:00') : null;
            const end = filterEnd.value ? new Date(filterEnd.value + 'T23:59:59.999') : null;
            const method = (historyMethod.value||'').trim();
            const q = (historyQuery.value||'').toLowerCase();
            return history.value.filter(tx => {
              const d = new Date(tx.date);
              if (start && d < start) return false;
              if (end && d > end) return false;
              if (method && tx.paymentMethod !== method) return false;
              if (q){
                const idStr = String(tx.id||'');
                const note = (tx.paymentNote||'').toLowerCase();
                const itemsStr = (tx.items||[]).map(i => (i.name||'').toLowerCase()).join(' ');
                if (!(idStr.includes(q) || note.includes(q) || itemsStr.includes(q))) return false;
              }
              return true;
            });
          });

          const historySummary = computed(() => {
            const arr = filteredHistory.value;
            const totalSum = arr.reduce((s, t) => s + (Number(t.total)||0), 0);
            const count = arr.length;
            return { count, total: totalSum, avg: count ? Math.floor(totalSum / count) : 0 };
          });

          function resetHistoryFilters(){
            historyQuery.value = '';
            historyMethod.value = '';
            filterStart.value = '';
            filterEnd.value = '';
          }

          function exportHistoryCSV(){
            const rows = [];
            const header = ['id','date','total','paymentMethod','itemsCount','discountPct','taxPct','paid','change','paymentNote','items'];
            rows.push(header.join(','));
            for (const tx of filteredHistory.value){
              const itemsText = (tx.items||[]).map(i => `${(i.name||'').replaceAll('"','""')} x ${i.qty} @ ${i.price}`).join('; ');
              const cols = [
                tx.id ?? '',
                tx.date ?? '',
                tx.total ?? 0,
                tx.paymentMethod ?? '',
                (tx.items||[]).length,
                tx.discountPct ?? 0,
                tx.taxPct ?? 0,
                tx.paid ?? 0,
                tx.change ?? 0,
                (tx.paymentNote||'').replaceAll('"','""'),
                itemsText,
              ].map(v => typeof v === 'string' ? `"${v}"` : v);
              rows.push(cols.join(','));
            }
            const csv = rows.join('\n');
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            const ts = new Date().toISOString().slice(0,19).replace(/[:T]/g,'-');
            a.download = `riwayat-${ts}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          }

          function loadReceipt(tx){
            lastReceipt.value = JSON.parse(JSON.stringify(tx));
            showReceiptModal.value = true;
          }

          function addCash(amount){ cash.value = (Number(cash.value)||0) + amount; }
          function paymentLabel(m){ return m==='cash' ? 'Tunai' : (m==='qris' ? 'QRIS' : 'Lainnya'); }

          async function printReceipt(){
            if (!hasPrintableReceipt.value) return;
            if (!showReceiptModal.value) { showReceiptModal.value = true; await nextTick(); }
            window.print();
          }

          function buildReceiptText(r){
            const L = [];
            L.push(storeName.value);
            L.push(storeAddress.value);
            L.push('Telp: ' + storePhone.value);
            L.push('');
            L.push('Waktu: ' + formatDateTime(r.date));
            L.push('ID: ' + (r.id || '-'));
            L.push('');
            (r.items||[]).forEach(it => {
              L.push(`${it.name} x ${it.qty} - ${formatIDR((it.price||0)*(it.qty||0))}`);
            });
            L.push('');
            L.push('Subtotal: ' + formatIDR(r.subtotal||0));
            if ((r.discountAmount||0) > 0) L.push(`Diskon ${r.discountPct||0}%: -` + formatIDR(r.discountAmount||0));
            if ((r.taxAmount||0) > 0) L.push(`Pajak ${r.taxPct||0}%: ` + formatIDR(r.taxAmount||0));
            L.push('Total: ' + formatIDR(r.total||0));
            if (r.paymentMethod) L.push('Metode: ' + paymentLabel(r.paymentMethod));
            if (r.paymentNote) L.push('Catatan: ' + r.paymentNote);
            L.push('Bayar: ' + formatIDR(r.paid||0));
            L.push('Kembali: ' + formatIDR(r.change||0));
            L.push('');
            L.push('Terima kasih');
            return L.join('\n');
          }

          async function shareReceiptWA(){
            if (!hasPrintableReceipt.value) return;
            const r = currentReceipt.value || {};
            const text = buildReceiptText(r);
            let files = [];
            // Try to capture receipt as image if library available
            try {
              await nextTick();
              const el = document.getElementById('receipt');
              if (el && window.html2canvas) {
                const canvas = await window.html2canvas(el, { backgroundColor: '#fff', scale: 2, useCORS: true });
                const blob = await new Promise(res => canvas.toBlob(res, 'image/png', 0.95));
                if (blob) {
                  files = [new File([blob], 'struk.png', { type: 'image/png' })];
                }
              }
            } catch {}

            if (navigator.share) {
              try {
                if (files.length && navigator.canShare && navigator.canShare({ files })) {
                  await navigator.share({ files, text });
                  return;
                }
                await navigator.share({ text });
                return;
              } catch {}
            }
            // Fallback to WhatsApp text share
            const wa = 'https://wa.me/?text=' + encodeURIComponent(text);
            window.open(wa, '_blank');
          }

          onMounted(async () => {
            await loadHistory();
            await loadProducts();
            loadSettings();
            // Register service worker for offline
            if ('serviceWorker' in navigator) {
              try { await navigator.serviceWorker.register('./sw.js', { scope: './' }); } catch (e) { console.warn('SW register failed', e); }
            }
          });

          return {
            // state
            newItem, cart, discountPct, taxPct,
            subtotal, discountAmount, taxable, taxAmount, total,
            activeTab, showPayment, paymentMethod, cash, change, otherNote,
            history, historyQuery, historyMethod, filterStart, filterEnd,
            lastReceipt, showReceiptModal,
            showSettings, storeName, storeAddress, storePhone,
            products, newProduct, productQuery, filteredProducts,
            showScanner, scanError,
            qrisBase,

            // computed
            hasPrintableReceipt, currentReceipt, filteredHistory, historySummary,
            qrisPayloadFinal,

            // methods
            formatIDR, formatDateTime,
            addItem, incQty, decQty, removeItem, clearCart,
            openPayment, confirmPayment,
            loadReceipt, printReceipt,
            addCash, paymentLabel,
            loadSettings, saveSettings,
            shareReceiptWA,
            loadProducts, saveProduct, editProduct, deleteProduct,
            addProductToCart,
            resetHistoryFilters, exportHistoryCSV,
            openScanner, closeScanner,
            };
        }
      });

      app.mount('#app');
    </script>
  </body>
  </html>
